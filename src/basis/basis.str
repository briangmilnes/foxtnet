 (*

	FoxNet: The Fox Project's Communication Protocol Implementation Effort
	Edoardo Biagioni (Edoardo.Biagioni@cs.cmu.edu)
	Brian Milnes (Brian.Milnes@cs.cmu.edu)
	Nick Haines  (Nick.Haines@cs.cmu.edu)
	Fox Project
	School of Computer Science
	Carnegie Mellon University
	Pittsburgh, Pa 15139-3891

		i.	Abstract

	 Fox_Basis groups all of the "utility" structures that we pass
	into almost all of our functors. The discipline is to
	reference almost nothing from the SML basis except those
	functions defined by the definition. The exceptions to this
	are the bytes and a few other signatures.

		ii.	Table of Contents

	i.	Abstract
	ii.	Table of Contents
	iii.	RCS Log
	1.	structure Fox_Basis
	2.	structure TV

		iii.	RCS Log
	
$Log: basis.str,v $
Revision 1.36  1996/07/05  17:52:49  esb
adapted to the new definition of Data_Pipe.

Revision 1.35  1996/04/18  18:44:26  cline
Removed Swap, Time, and Linearize.

Revision 1.34  1996/02/23  19:52:16  cline
removed parser

Revision 1.33  1996/02/06  23:43:43  esb
added a structure Memo, with signature MEMOIZE.

Revision 1.32  1996/01/15  18:00:49  cline
removed FoxWord

Revision 1.31  1995/11/12  16:51:01  esb
added structure Event.

Revision 1.30  1995/09/17  22:07:25  esb
added Time.

Revision 1.29  1995/08/16  21:27:00  esb
added Write_Once structure for write-once variables

Revision 1.28  1995/06/20  17:40:21  esb
eliminated several structures, added word arrays.

Revision 1.27  1995/04/05  15:12:04  esb
eliminated locatives, which were not being used.

Revision 1.26  1995/03/10  03:53:27  esb
adapted to new vendor.sig.

Revision 1.25  1995/03/07  20:30:58  esb
removed Debug_Trace, added a sharing constraint.

Revision 1.24  1995/02/13  22:57:04  esb
added Access for Dyn_Array.

Revision 1.23  1995/02/04  20:39:06  robby
updated to 107

Revision 1.22  1994/12/01  18:44:38  esb
added structure Store to Event_Queue.

Revision 1.21  1994/11/10  16:14:37  milnes
Added the Debug_Trace substructure.

Revision 1.20  1994/10/20  19:58:38  esb
fixed a bug.

Revision 1.19  1994/10/19  23:03:47  esb
added Environment.

Revision 1.18  1994/10/11  15:43:04  cline
Upgraded to work with SML/NJ 1.05b

Revision 1.17  1994/09/30  16:47:08  esb
changed DXS to byte-extern, dlocs to dyn_locs

Revision 1.16  1994/09/19  18:23:39  robby
re-removed SEND_ and RECEIVE_PACKET

Revision 1.15  1994/08/26  21:48:04  robby
added send and receive packet back in

Revision 1.14  1994/08/25  23:42:36  robby
added linearize

Revision 1.13  94/08/25  22:12:14  milnes
Added DLOCS and DXS.

Revision 1.12  1994/08/02  20:19:20  esb
replaced send_ and receive_message with dynamic arrays.

Revision 1.11  1994/07/04  21:41:11  esb
adapted to Copy/Create split.

Revision 1.10  1994/07/01  02:24:44  danwang
Moved control structures into Fox_Basis.

Revision 1.9  1994/06/16  16:24:43  danwang
Updated to use functorized Fox_Basis

Revision 1.8  1994/02/21  00:10:36  esb
added Order.

Revision 1.7  93/10/29  04:55:22  esb
added structure Copy

Revision 1.6  1993/10/06  17:21:22  esb
added the dispatcher structure.

Revision 1.5  1993/10/06  02:32:09  esb
added a store structure.

Revision 1.4  1993/09/17  16:52:03  milnes
Shortened that name of format and access.

Revision 1.3  1993/09/13  22:08:05  cline
deleted '#'s from RCS log

Revision 1.2  1993/09/02  15:10:13  esb
removed the scheduler from the basis.

Revision 1.1  1993/08/27  20:32:46  esb
Initial revision


	1.	structure Fox_Basis
*)

structure Fox_Basis: FOX_BASIS =
 struct
  structure V: VENDOR = V ()

  structure Debug: DEBUG = Debug (val include_tests = true
				  val do_tests = true
				  val include_prints = true
				  val do_prints = true
				  val include_timings = true
				  val do_timings = false)

  structure Test: TEST = Test (structure V = V)

  structure Copy: COPY = Copy ()

  structure Create: CREATE = Create (structure Copy = Copy
				     structure V = V)

  structure Order: BYTE_ORDERS = Byte_Orders ()

  structure Store: STORE = Store (structure V = V)

  structure Fifo: FIFO = Fifo (structure V = V)
  structure Deq: DEQ = Deq (structure V = V)

  structure Checksum: CHECKSUM = Checksum (structure V = V
					   structure Debug = Debug)

  structure Tabulate: TABULATE = Tabulate ()
  structure Environment: UNIX_ENVIRONMENT = Unix_Environment (structure V = V)

  structure Format: FORMAT = Format (structure V = V)

  local
   val filter_os = if Compiler.architecture = ".alpha32" then "osf1"
		   else "mach"
  in
   structure Filter: FILTER = Filter (structure Debug = Debug
				      structure V = V
				      val filter_os = filter_os
				      val debug_level = NONE)
  end (* local *)

  structure Access: ACCESS = Access (structure V = V)

  structure Compare: COMPARE_SEQ =
      Compare_Seq (structure Seq = Word_Array.W8.U_Big.F
		   val equal = (fn (a, b: Word8.word) => a = b)
		   val makestring = Word8.fmt StringCvt.DEC
		   structure V = V)

  structure Scheduler = Coroutine (structure Debug = Debug
				   structure V = V)

  structure Event_Queue = Event_Queue (structure Scheduler = Scheduler
				       structure Store = Store
				       structure Debug = Debug
				       structure V = V
				       val debug_level = NONE)

  structure Event = Simple_Event_Queue (structure Event_Queue = Event_Queue)

  structure Pipe = Data_Pipe (structure Scheduler = Scheduler
			      structure Queue = Deq
			      structure V = V
			      structure Debug = Debug)

  structure Semaphore = Semaphore (structure Scheduler = Scheduler
				   structure Queue = Fifo)

  structure Write_Once = Write_Once (structure V = V
				     structure Scheduler = Scheduler)

  structure Memo = Memoize ()

 end (* struct *)

(*
		2.	structure TV
	TV structure need for Fox_Basis tests
*)

structure TV: VENDOR =
 struct	
  open Fox_Basis.V
  val print = Fox_Basis.Test.print
 end
