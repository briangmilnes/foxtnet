(*

	FoxNet: The Fox Project's Communication Protocol Implementation Effort
	Edoardo Biagioni (Edoardo.Biagioni@cs.cmu.edu)
	Brian Milnes (Brian.Milnes@cs.cmu.edu)
	Ken Cline (Kenneth.Cline@cs.cmu.edu)
        Nick Haines (Nick.Haines@cs.cmu.edu)
	Fox Project
	School of Computer Science
	Carnegie Mellon University
	Pittsburgh, Pa 15139-3891

		i.	Abstract

	Simple Inetd, only handling the internal ports and not even all.

		ii.	Table of Contents

	i.	Abstract
	ii.	Table of Contents
	iii.	RCS Log
	1.	structure Inetd_Stack
	2.	structure Inetd
	3.	functor Build_Inetd

		iii.	RCS Log
	
$Log: inetd.str,v $
Revision 1.6  1996/10/03  18:40:17  esb
adapted to new builddns.fun.

Revision 1.5  1996/09/17  15:58:47  cline
changed tcp user timeout to 5 minutes.  exported Eth structure.

Revision 1.4  1996/07/24  17:09:56  cline
*** empty log message ***

Revision 1.3  1996/07/22  17:51:36  cline
export Dns_Lookup

Revision 1.2  1996/06/07  20:27:27  cline
support user specified services

Revision 1.1  1996/05/14  21:13:56  esb
Initial revision


		1.	structure Inetd_Stack
*)

structure Inetd_Stack =
 struct
  structure B = Fox_Basis

  val dev_debug = ref 0
  val eth_debug = ref 0
  val arp_debug = ref 0
  val ip_debug = ref 0
  val udp_debug = ref 0
  val tcp_debug = ref 0
  val debug_level = SOME (ref 0)

  local
   structure Base = Build_Eth_Dev (structure B = Fox_Basis
				   val debug_level = SOME dev_debug)

   structure Init = Initialize (structure Device = Base.Raw
				structure V = Fox_Basis.V
(* use "val hostname_to_ip = fn _ => NONE" to force the use of system files
   (e.g. /etc/* ) to figure out the local IP number. *)
				val hostname_to_ip =
				       Hostname_Ip.hostname_to_ip 
				val interface_number = 0)

   structure Stack = Build_Dns (structure Device = Base.Dev
				structure B = Fox_Basis
				val tcp_window_size = 4096
				val tcp_user_timeout = (* 5 minutes *)
				            Word32.fromInt (5 * 60 * 1000)
				val udp_checksum = true
				val eth_debug_level = NONE
				val arp_debug_level = NONE
				val ip_debug_level = NONE
				val tcp_debug_level = SOME tcp_debug
				val udp_debug_level = NONE
				val dns_debug_level = NONE)

   val transport_setup = Stack.Udp.Transport_Setup.Setup (Init.Ip.setup ())

  in
   structure Init = Init
   structure Eth = Stack.Eth
   structure Ip = Stack.Ip
   structure Udp = Stack.Udp
   structure Tcp = Stack.Tcp
   structure Dns_Lookup = Stack.Dns_Lookup

   val setup = transport_setup
   val dns_setup = Init.Dns.setup transport_setup

  end
 end

(*
		2.	structure Inetd
*)

structure Inetd = Inetd (structure Tcp = Inetd_Stack.Tcp
			 structure Udp = Inetd_Stack.Udp
			 val tcp_services = []
			 val udp_services = []
			 val setup = Inetd_Stack.setup
			 structure B = Fox_Basis
			 val debug_level = Inetd_Stack.debug_level)

(*
		3.	functor Build_Inetd
*)

functor Build_Inetd
	(val tcp_services: (Word16.word * Inetd_Stack.Tcp.handler) list
	 val udp_services: (Word16.word * Inetd_Stack.Udp.handler) list) =
        Inetd (structure Tcp = Inetd_Stack.Tcp
	       structure Udp = Inetd_Stack.Udp
	       val tcp_services = tcp_services
	       val udp_services = udp_services
	       val setup = Inetd_Stack.setup
	       structure B = Fox_Basis
	       val debug_level = Inetd_Stack.debug_level)
