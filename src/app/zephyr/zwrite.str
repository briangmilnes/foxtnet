(*

	FoxNet: The Fox Project's Communication Protocol Implementation Effort
	Edoardo Biagioni (Edoardo.Biagioni@cs.cmu.edu)
	Brian Milnes (Brian.Milnes@cs.cmu.edu)
	Ken Cline (Kenneth.Cline@cs.cmu.edu)
        Nick Haines (Nick.Haines@cs.cmu.edu)
	Robby Findler (Robert.Findler@cs.cmu.edu)
	Daniel Wang (Daniel.Wang@cs.cmu.edu)
	Fox Project
	School of Computer Science
	Carnegie Mellon University
	Pittsburgh, Pa 15139-3891

		i.	Abstract

	A structure to build Zwrite.

	
		ii.	Table of Contents

	i.	Abstract
	ii.	Table of Contents
	iii.	RCS Log
	1.	

		iii.	RCS Log
	
$Log: zwrite.str,v $
Revision 1.3  1994/09/03  21:01:59  danwang
Fixed authentication.

Revision 1.2  1994/07/15  18:42:42  robby
added authentication, checksumming isn't right yet.

Revision 1.1  94/07/14  16:27:24  milnes
Initial revision


		1.	structure Zwrite 

*)


local 
 val ip_over_eth = 2ux800
 val arp_over_eth = 2ux806
 val udp_over_ip = 1ux11
 val zephyr_hm_port = 2u2104 (* A test port, 2u14623  *)
 val my_port = 2u50000
 val my_ip = 4u0
 val my_realm = "CS.CMU.EDU"
 val do_prints=false


 structure Dev = BuildEthDev
   (structure B = Fox_Basis
    val protocol_numbers = [ip_over_eth, arp_over_eth]
    val high_priority_filter = false
    val do_prints = do_prints)

 structure Stack = BuildUdp (structure Device    = Dev.EthDev
                             structure B = Fox_Basis
                             val ip_over_eth     = ip_over_eth 
			     val udp_over_ip     = udp_over_ip
			     val use_arp         = false
			     val do_prints       = do_prints)

 structure Kerberos=BuildKerberos(structure B=Fox_Basis
				  val do_prints=do_prints
				  structure Udp_Stack=Stack)

 structure Zephyr_Extern=Zephyr_Extern(structure B = Fox_Basis
				       val do_prints=do_prints)
  fun read_password () =
    let fun remove_trailing_newline s=
	substring (s, 0, (size s) - 1)
	val in_stream = std_in
    in
      System.Unsafe.CInterface.system "/bin/stty -echo";
      Fox_Basis.V.print "Password: ";
      (remove_trailing_newline (input_line in_stream))
      before
      (Fox_Basis.V.print "\n";
       System.Unsafe.CInterface.system "/bin/stty echo")
    end

  structure K=Kerberos
in       
  structure Zwrite = Zwrite(structure B = Fox_Basis
			    structure Ip = Stack.Ip
			    structure Udp = Stack.Udp
			    structure K=Kerberos
			    structure Z=Zephyr_Extern
			    val udp_over_ip = udp_over_ip
			    val zephyr_hm_port = zephyr_hm_port
			    val my_port = my_port
			    val my_ip = my_ip
			    val my_realm = my_realm
			    val do_prints = do_prints)

  fun authenticate_as kerb_id =
      (K.get_ticket_granting_credential
      read_password (K.Principal {name_p=kerb_id,instance_p="",
				  realm_p=my_realm}) ;
        ())
end





















