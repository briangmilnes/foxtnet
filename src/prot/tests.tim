(*

	FoxNet: The Fox Project's Communication Protocol Implementation Effort
	Edoardo Biagioni (Edoardo.Biagioni@cs.cmu.edu)
	Brian Milnes (Brian.Milnes@cs.cmu.edu)
	Ken Cline (Kenneth.Cline@cs.cmu.edu)
        Nick Haines (Nick.Haines@cs.cmu.edu)
	Fox Project
	School of Computer Science
	Carnegie Mellon University
	Pittsburgh, Pa 15139-3891

		i.	Abstract

	A set of specific calls to the timing tests.

		ii.	Table of Contents

	i.	Abstract
	ii.	Table of Contents
	iii.	RCS Log
	1.	functor Timing_Loops
	2.	loop_tries
	3.	loop_confirm
	4.	time_prot
	5.	fragment
	6.	signature TIME_TCPIP_STACK
	7.	structure BP
	8.	structure Time_TCPIP
	9.	structure Time_TCPIP_Small

		iii.	RCS Log
	
$Log: tests.tim,v $
Revision 1.11  1994/09/12  18:20:48  milnes
Added timing for ip_no_icmp/ip.

Revision 1.10  1994/08/24  22:30:25  esb
uncommented UDP tests, added yet another test functor for TCP.

Revision 1.9  1994/08/17  16:32:15  esb
the benchmarks now work.

Revision 1.8  1994/07/07  02:31:38  esb
recomputed some of the values, exchanged order of TCP and UDP tests.

Revision 1.7  1994/06/20  20:17:02  esb
adapted to benchmark.sig.

Revision 1.6  1994/05/04  01:39:41  esb
major debugging. Almost everything seems to run now.

Revision 1.5  94/04/20  14:46:13  milnes
Split out test emit/parse.

Revision 1.2  1994/03/29  17:44:40  milnes
Small rearrangments to the tests.

Revision 1.1  1994/03/11  18:50:29  milnes
Initial revision

	1.	functor Timing_Loops
*)

functor Timing_Loops (structure BP: BENCHMARK_PROTOCOLS) =
 struct

(*
	2.	loop_tries
		
	Call BP.client "tries_max" times with the given arguments.
*)

  fun loop_tries {ps = {protocol, repetitions, size, confirm, server},
		  tries_max, current_tries} =
       if current_tries > tries_max then ()
       else
	(Fox_Basis.V.print ("Trial " ^ (makestring current_tries) ^ ".\n");
	 BP.client (BP.Test {protocol = protocol, repetitions = repetitions,
			     size = size, confirm = confirm,
			     check_data = BP.None, print_packets = false,
			     print_history = false},
		    server);
	 loop_tries {ps = {protocol = protocol, repetitions = repetitions,
			   size = size, confirm = confirm, server = server},
		     tries_max = tries_max,
		     current_tries = current_tries + 1})

(*
	3.	loop_confirm

	Call loop_tries incrementing the confirm by confirm_increment
	up to confirm_max.
*)

  fun loop_confirm {ps = {protocol, repetitions, size, confirm, server},
		    tries_max, current_tries, confirm_increment, confirm_max} =
       if confirm > confirm_max then ()
       else
	(loop_tries {ps = {protocol = protocol, repetitions = repetitions,
			   size = size, confirm = confirm, server = server},
		     tries_max = tries_max, current_tries = current_tries};
	 loop_confirm {ps = {protocol = protocol, repetitions = repetitions,
			     size = size,
			     confirm = confirm + confirm_increment,
			     server = server},
		       tries_max = tries_max, current_tries = current_tries,
		       confirm_increment = confirm_increment,
		       confirm_max = confirm_max})
(*
	4.	time_prot

	Call loop_tries twice, once with a minimum-sized packet
	then with a maximum-sized packet.  Then call loop_confirm
	to run the other tests.
*)

  fun time_prot (server, prot, repetitions, max_size, min_size,
		 confirm_increment, tries) =
       (loop_tries {ps = {protocol = prot, repetitions = 4u1500,
			  size = min_size, confirm = 4u1, server = server},
		    tries_max = tries, current_tries = 1};
	loop_tries {ps = {protocol = prot, repetitions = repetitions,
			  size = max_size, confirm = 4u1, server = server},
		    tries_max = tries, current_tries = 1};
	if prot <> BP.Tcp then
	 loop_confirm {ps = {protocol = prot, repetitions = repetitions,
			     size = max_size, confirm = 4u20, server = server},
		       tries_max = tries, current_tries = 1,
		       confirm_increment = confirm_increment,
		       confirm_max = 4u24}
	else ())

(*
	5.	fragment

	Call loop_tries with "tries" times on the given protocol with
	a confirm of one.
*)

  fun fragment (server, prot, rep, size, tries) =
       loop_tries {ps = {protocol = prot, repetitions = rep, size = size,
			 confirm = 4u1, server = server},
		   tries_max = tries, current_tries = 1}
 end (* struct *)

(*
	6.	signature TIME_TCPIP_STACK
*)

signature TIME_TCPIP_STACK =
 sig
  val eth: string -> unit
  val ip_no_icmp : string -> unit
  val ip: string -> unit
  val udp: string -> unit
  val tcp: string -> unit
  val all: string -> unit
 end					(* sig *)

(*
	8.	structure Time_TCPIP
*)

structure BP = Benchmark_Protocols (structure B = Fox_Basis
				    val do_protocol_prints = false
				    val do_timing_prints = false)

(*
	8.	structure Time_TCPIP
*)

structure Time_Tcp_Ip: TIME_TCPIP_STACK =
 struct

  structure TL = Timing_Loops (structure BP = BP)

  fun eth server =			(* use BP.server 42. *)
       TL.time_prot (server, BP.Eth, 4u1399, 4u1500, 4u46, 4u1, 6)

  fun ip_no_icmp server =			(* use BP.server 54. *)
       (TL.time_prot (server, BP.Ip_No_Icmp, 4u1417, 4u1480, 4u1, 4u1, 6);
	TL.fragment (server, BP.Ip_No_Icmp, 4u128, 4u16384, 6);
	TL.fragment (server, BP.Ip_No_Icmp, 4u86, 4u24576, 6))

  fun ip server =			(* use BP.server 54. *)
       (TL.time_prot (server, BP.Ip, 4u1417, 4u1480, 4u1, 4u1, 6);
	TL.fragment (server, BP.Ip, 4u128, 4u16384, 6);
	TL.fragment (server, BP.Ip, 4u86, 4u24576, 6))

  fun udp server =			(* use BP.server 60. *)
       (TL.time_prot (server, BP.Udp, 4u1425, 4u1472, 4u1, 4u1, 6);
	TL.fragment (server, BP.Udp, 4u256, 4u8192, 6);
	TL.fragment (server, BP.Udp, 4u128, 4u16384, 6);
	TL.fragment (server, BP.Udp, 4u86, 4u24576, 6))

  fun tcp server =			(* use BP.server 30. *)
       (TL.time_prot (server, BP.Tcp, 4u1437, 4u1460, 4u1, 4u1, 6);
	TL.fragment (server, BP.Tcp, 4u256, 4u8192, 6);
	TL.fragment (server, BP.Tcp, 4u128, 4u16384, 6);
	TL.fragment (server, BP.Tcp, 4u86, 4u24576, 6))

  fun all server =			(* use BP.server 186. *)
       (eth server;
	ip_no_icmp server;
	ip server;
	tcp server;
	udp server)

 end (* struct *)

(*
	9.	structure Time_TCPIP_Small
*)

structure Time_Tcp_Ip_Small: TIME_TCPIP_STACK =
 struct

  structure TL = Timing_Loops (structure BP = BP)

  fun eth server =			(* use BP.server 5. *)
       TL.time_prot (server, BP.Eth, 4u1399, 4u1500, 4u46, 4u2, 1)

  fun ip_no_icmp server =			(* use BP.server 7. *)
       (TL.time_prot (server, BP.Ip_No_Icmp, 4u1417, 4u1480, 4u1, 4u2, 1);
	TL.fragment (server, BP.Ip_No_Icmp, 4u128, 4u16384, 1);
	TL.fragment (server, BP.Ip_No_Icmp, 4u86, 4u24576, 1))

  fun ip server =			(* use BP.server 7. *)
       (TL.time_prot (server, BP.Ip, 4u1417, 4u1480, 4u1, 4u2, 1);
	TL.fragment (server, BP.Ip, 4u128, 4u16384, 1);
	TL.fragment (server, BP.Ip, 4u86, 4u24576, 1))


  fun udp server =			(* use BP.server 8. *)
       (TL.time_prot (server, BP.Udp, 4u1425, 4u1472, 4u1, 4u2, 1);
	TL.fragment (server, BP.Udp, 4u256, 4u8192, 1);
	TL.fragment (server, BP.Udp, 4u128, 4u16384, 1);
	TL.fragment (server, BP.Udp, 4u86, 4u24576, 1))

  fun tcp server =			(* use BP.server 5. *)
       (TL.time_prot (server, BP.Tcp, 4u1437, 4u1460, 4u1, 4u2, 1);
	TL.fragment (server, BP.Tcp, 4u256, 4u8192, 1);
	TL.fragment (server, BP.Tcp, 4u128, 4u16384, 1);
	TL.fragment (server, BP.Tcp, 4u86, 4u24576, 1))

  fun all server =			(* use BP.server 25. *)
       (eth server;
	ip_no_icmp server;
	ip server;
	tcp server;
	udp server)

 end (* struct *)

structure T =
 struct

  structure TL = Timing_Loops (structure BP = BP)

  fun run server =
       TL.loop_tries {ps = {protocol = BP.Tcp, repetitions = 4u1500,
			    size = 4u1, confirm = 4u1, server = server},
		      tries_max = 1, current_tries = 1}
       
  fun run_l server =
       TL.loop_tries {ps = {protocol = BP.Tcp, repetitions = 4u1500,
			    size = 4u1460, confirm = 4u1, server = server},
		      tries_max = 1, current_tries = 1}

  fun run_ll server =
       TL.fragment (server, BP.Tcp, 4u86, 4u24576, 1)
 end
