(*

	FoxNet: The Fox Project's Communication Protocol Implementation Effort
	Edo Biagioni (esb@cs.cmu.edu)
	Brian Milnes (milnes@cs.cmu.edu)
	Ken Cline (ken.cline@cs.cmu.edu)
	Nick Haines (nickh@cs.cmu.edu)
	Fox Project
	School of Computer Science
	Carnegie Mellon University
	Pittsburgh, Pa 15139-3891

	i.	Abstract

	testaddress.str: central place for storing and retrieving
	addresses of test machines for simulated tests.


	ii.	Table of Contents

	i.	Abstract
	ii.	Table of Contents
	iii.	RCS Log
	1.	structure Test_Addresses


	iii.	RCS Log

$Log: testaddress.str,v $
Revision 1.6  1996/07/22  21:05:10  cline
*** empty log message ***

Revision 1.5  1996/01/15  18:00:49  cline
removed FoxWord

Revision 1.4  1995/11/08  23:10:27  cline
*** empty log message ***

Revision 1.3  1995/09/29  14:12:48  cstone
Added lair

Revision 1.2  1995/09/18  19:31:28  esb
corrected APL's ethernet address.

Revision 1.1  1995/06/20  17:20:09  esb
Initial revision

Revision 1.25  1995/03/29  21:33:58  esb
the IP address of inbox.foxnet was wrong

Revision 1.24  1995/03/28  23:17:25  esb
added fire, terrier, unbox

Revision 1.23  1995/03/01  21:36:48  esb
added apl

Revision 1.22  1995/02/04  20:39:19  robby
updated to 107

Revision 1.21  1995/01/26  18:48:13  esb
added cmu-default and psc-gw-1.

Revision 1.20  1995/01/06  01:37:32  esb
rationalized.

Revision 1.19  1994/11/22  13:59:26  milnes
Added more hosts.

Revision 1.18  1994/11/10  16:14:17  milnes
Added some shadowing addresses.

Revision 1.17  1994/10/20  14:35:00  cline
added silver and pl1

Revision 1.16  1994/10/11  15:43:04  cline
Upgraded to work with SML/NJ 1.05b

Revision 1.15  1994/08/28  18:40:19  milnes
Added a default gateway.

Revision 1.14  1994/08/28  18:35:47  milnes
Removed some extra carriage returns while deciding not to
change this.

Revision 1.13  1994/08/24  22:29:36  esb
lower-cased names, added mcmurdo and basil.

Revision 1.12  1994/07/25  16:47:06  danwang
Added desert to list of machine.

Revision 1.11  1994/07/14  16:55:01  milnes
Added sticky.

Revision 1.10  1994/06/24  00:09:25  robby
added breadfruit

Revision 1.9  94/06/05  21:20:58  robby
added avocado.srv

Revision 1.8  94/05/03  20:55:11  milnes
Added ip option handling.

Revision 1.7  1994/03/02  21:17:49  esb
fixed sly's address.

Revision 1.6  1994/02/28  14:06:09  milnes
Updated eth addresses after machine cabinet swapping.

Revision 1.5  1994/02/17  17:10:27  milnes
Checked out, reinstalled old, rechecked in to repair the afs file move problems that confused rcs.

Revision 1.3  1994/01/30  18:34:58  milnes
added you and out.

Revision 1.2  1994/01/18  17:18:28  esb
added eth_ip.

Revision 1.1  1994/01/18  04:25:08  esb
Initial revision


	1.	structure Test_Addresses
*)

structure Test_Addresses =
 struct
  local
   fun make_eth (i0, i1, i2, i3, i4, i5) = 
        let val join = Word48.orb
            val shift = Word48.<<
            fun convert n = Word48.fromInt n
        in join (join (join (shift (convert i0, 0w40),
			     shift (convert i1, 0w32)),
		       join (shift (convert i2, 0w24),
			     shift (convert i3, 0w16))),
		 join (shift (convert i4, 0w8),
		       shift (convert i5, 0w0)))
	end

   fun make_ip (high, mid1, mid2, low) =
        let val join = Word32.orb
            val shift = Word32.<<
            fun convert n = Word32.fromInt n
        in join (join (shift (convert high, 0w24),
		       shift (convert mid1, 0w16)),
	         join (shift (convert mid2, 0w8),
		       convert low))
        end

   type host = {name: string, ip: Word32.word, eth: Word48.word}

   fun make_host (name, ip, eth) =
        {name = name, ip = make_ip ip, eth = make_eth eth}

   fun make_hosts (name, ip, ip1, eth) =
        [{name = name, ip = make_ip ip, eth = make_eth eth},
	 {name = name ^ ".foxnet", ip = make_ip ip1, eth = make_eth eth}]

   val table =
	make_hosts ("lair",    (128, 2, 198, 54), (128, 2, 198, 204),
		    (8, 0, 43, 188, 78, 43)) @
        make_hosts ("fire",    (128, 2, 198, 53), (128, 2, 198, 203),
		    (8, 0, 43, 189, 225, 179)) @
        make_hosts ("terrier", (128, 2, 198, 47), (128, 2, 198, 200),
		    (8, 0, 43,  57, 118, 206)) @
        make_hosts ("unbox",   (128, 2, 198, 49), (128, 2, 198, 202),
		    (8, 0, 43, 189, 225,  64)) @
        make_hosts ("inbox",   (128, 2, 198, 48), (128, 2, 198, 201),
		    (8, 0, 43, 189, 141, 132)) @
        make_hosts ("sly",     (128, 2, 222,  15), (128, 2, 205,  48),
		    (8, 0, 43,  28,  22, 202)) @
	make_hosts ("snow",    (128, 2, 222,  84), (128, 2, 205,  49),
		    (8, 0, 43,  36, 222, 165)) @
	make_hosts ("silver",  (128, 2, 205,  46), (128, 2, 198, 209),
		    (8, 0, 43,  51, 242, 255)) @
	make_hosts ("kitsune", (128, 2, 198,  56), (128, 2, 198, 206),
		    (8, 0, 43,  57, 119, 202)) @
	make_hosts ("pl1",     (128, 2, 198, 165), (128, 2, 198, 215),
		   (8, 0, 43, 189, 127,  55)) @
	make_hosts ("rpg",     (128, 2, 198,  57), (128, 2, 198, 207),
		    (8, 0, 43, 187,  74,  72)) @
	make_hosts ("apl",     (128, 2, 198,  58), (128, 2, 198, 208),
		    (8, 0, 43, 190, 93,  76)) @
	make_hosts ("ada",     (128, 2, 198,  72), (128, 2, 198, 216),
		    (8, 0, 43, 189, 224, 207)) @
	make_hosts ("tcl",     (128, 2, 194, 230), (128, 2, 194, 239),
		    (8, 0, 43, 230, 113, 210)) @
	make_hosts ("forth",   (128, 2, 194, 231), (128, 2, 194, 240),
		    (8, 0, 43, 230, 224, 230)) @
	make_hosts ("quick",   (128, 2, 222,  50), (128, 2, 205,  50),
		    (8, 0, 43,  36,  55,  21)) @
	make_hosts ("crafty",  (128, 2, 222,  35), (128, 2, 205,  51),
		    (8, 0, 43,  30, 158,  42)) @
	make_hosts ("fortran", (128, 2, 206, 166), (128, 2, 198, 213),
		    (8, 0, 43,  36,  56, 167)) @
	make_hosts ("wagosh",  (128, 2, 206, 162), (128, 2, 198, 211),
		    (8, 0, 43,  30, 159,  95)) @
	make_hosts ("sticky",  (128, 2, 250, 115), (128, 2, 198, 214),
		    (8, 0, 43,  36,  50,  60)) @
	make_hosts ("desert",  (128, 2, 206,  48), (128, 2, 198, 210),
		    (8, 0, 43,  30,  55, 239)) @
	make_hosts ("cobol",   (128, 2, 206, 165), (128, 2, 198, 212),
		    (8, 0, 43,  42, 122, 191)) @
	[make_host ("basic",    (128, 2, 205, 250), (8, 0,  9,  32, 196, 210)),
	 make_host ("maclisp",  (128, 2, 206, 175), (8, 0,  9,  18, 228, 213)),
	 make_host ("vixen",    (128, 2, 206, 178), (8, 0, 32,   9,  80,  24)),
	 make_host ("out",      (128, 2, 205,  35), (8, 0, 43,  27,  95,  96)),
	 make_host ("you",      (128, 2, 205,  34), (8, 0, 43,  36, 230,  97)),
	 make_host ("rwd",      (128, 2, 222, 140), (8, 0, 43,  42, 245, 148)),
	 make_host ("gw",       (128, 2, 254,  36), (0, 0, 12,   5, 132, 236)),
	 make_host ("avocado",  (128, 2, 222, 169), (8, 0, 32,   6,  69, 120)),
	 make_host ("mcmurdo",  (157,132,103,  50), (0, 0, 12,   5, 132, 236)),
	 make_host ("basil",    (192,190,242,  17), (0, 0, 12,   5, 132, 236)),
	 make_host ("cmu-default",(128,2,  1,   2), (0, 0, 12,   5, 132, 236)),
	 make_host ("psc-gw-1", (128,  2,  2,   1), (0, 0, 12,   5, 132, 236))]

   fun select_name wanted (entry as {name, ip, eth}, previous) =
        if wanted = name then SOME entry else previous

   fun select_ip wanted (entry as {name, ip, eth}, previous) =
        if wanted = ip then SOME entry else previous

   fun select_eth wanted (entry as {name, ip, eth}, previous) =
        if wanted = eth then SOME entry else previous

  in (* local *)
   fun ip_eth ip =
        case Fox_Basis.V.List.fold (select_ip ip) table NONE of
	   NONE => NONE
	 | SOME {name, ip, eth} => SOME eth

   exception Test_Address_Unknown_Ip of Word32.word
   fun get_eth ip = 
        case Fox_Basis.V.List.fold (select_ip ip) table NONE of
	   NONE => raise Test_Address_Unknown_Ip ip
	 | SOME {name, ip, eth} => eth

   fun eth_ip eth =
        case Fox_Basis.V.List.fold (select_eth eth) table NONE of
	   NONE => NONE
	 | SOME {name, ip, eth} => SOME ip

   fun name_ip name =
        case Fox_Basis.V.List.fold (select_name name) table NONE of
	   NONE => NONE
	 | SOME {name, ip, eth} => SOME ip

   exception Test_Address_Unknown_Name of string
   fun get_ip name = 
        case Fox_Basis.V.List.fold (select_name name) table NONE of
	   NONE =>
	    (print ("testaddress.str: name " ^ name ^ " not known\n");
	     raise Test_Address_Unknown_Name name)
	 | SOME {name, ip, eth} => ip

   val name_eth = get_eth o get_ip

   fun ip_name ip =
        case Fox_Basis.V.List.fold (select_ip ip) table NONE of
	   NONE => NONE
	 | SOME {name, ip, eth} => SOME name

   val default_gateway =
        case name_ip "gw" of
	   NONE => Word32.fromInt 0
	 | SOME ip => ip

  end (* local *)
 end (* struct *)
