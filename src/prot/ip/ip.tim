(*

	FoxNet: The Fox Project's Communication Protocol Implementation Effort
	Edoardo Biagioni (Edoardo.Biagioni@cs.cmu.edu)
	Brian Milnes (Brian.Milnes@cs.cmu.edu)
	Ken Cline (Kenneth.Cline@cs.cmu.edu)
        Nick Haines (Nick.Haines@cs.cmu.edu)
	Fox Project
	School of Computer Science
	Carnegie Mellon University
	Pittsburgh, Pa 15139-3891

		i.	Abstract



		ii.	Table of Contents

	i.	Abstract
	ii.	Table of Contents
	iii.	RCS Log
	1.	functor IpTimAux

		iii.	RCS Log
	
$Log: ip.tim,v $
Revision 1.28  1995/03/10  03:46:34  esb
adapted to new vendor.sig.

Revision 1.27  1995/02/04  20:40:05  robby
updated to 107

Revision 1.26  1994/09/12  18:13:56  milnes
Added a functor parameter print_header.

Revision 1.25  1994/08/18  20:35:15  esb
removed on_receipt.

Revision 1.24  1994/08/17  16:27:22  esb
now works.

Revision 1.23  1994/07/01  02:27:22  danwang
Moved control structures into Fox_Basis.

Revision 1.22  1994/06/20  20:18:15  esb
added translate_pattern.

Revision 1.21  1994/06/17  13:55:02  danwang
Fixed to reference Tabulate from the Fox_Basis.

Revision 1.20  1994/06/16  21:50:38  danwang
Updated to use functorized Fox_Basis.

Revision 1.19  1994/06/13  21:08:15  esb
adapted to the new Ip.incoming_message.

Revision 1.18  1994/05/04  01:40:55  esb
minor fix.

Revision 1.17  94/04/06  23:11:59  esb
removed an unnecessary relic.

Revision 1.16  94/03/29  17:44:40  milnes
Moved to using Receive_Packet size.

Revision 1.15  1994/03/04  02:26:33  milnes
Added mut.

Revision 1.14  1994/02/25  18:35:12  milnes
Updated timing and moved to safe array operations.

Revision 1.13  1994/02/21  00:00:32  esb
minor change.

Revision 1.12  94/02/17  17:10:27  milnes
Checked out, reinstalled old, rechecked in to repair the afs file move problems that confused rcs.

Revision 1.10  1994/02/08  19:04:29  milnes
Changes for new whole new timing style.

Revision 1.9  1994/01/30  18:30:02  milnes
interface changes.

Revision 1.8  1994/01/17  19:51:04  milnes
Changes for ip fragmentation.

Revision 1.7  93/12/22  14:16:27  cline
Added high_priority_filter to BuildIp.

Revision 1.6  1993/12/09  19:42:19  milnes
Updated to handle scheduler, proto.sig, dev.sig and timeprotocol.sig changes.

Revision 1.5  1993/12/08  20:57:28  milnes
Updated to the new timing signature.

Revision 1.4  1993/11/11  04:57:41  esb
functor parameter changes.

Revision 1.3  1993/11/09  22:09:16  milnes
Shared the event queue.

Revision 1.2  1993/10/25  19:33:11  cline
removed .U from Byte[421].U

Revision 1.1  1993/10/25  18:27:44  milnes
Initial revision


		1.	functor Ip_Tim
*)

functor Ip_Tim (structure Ip: IP_PROTOCOL
		structure B: FOX_BASIS
		    sharing type Ip.incoming_data = B.Dyn_Array.T
		        and type Ip.outgoing = B.Dyn_Array.T
		        and type Ip.ip_number = ubyte4
		        and type Ip.ip_protocol = ubyte1
                val print_header : string
		val protocol_number: ubyte1
		val debug_level: int ref option): TIME_PROTOCOL  =
 struct
  structure Trace = Trace (structure V = B.V
			   val debug_level = debug_level
			   val module_name = "ip.tim")
  val local_print = Trace.local_print
  val debug_print = Trace.debug_print 

  structure P = Ip
  val header = print_header 
  type byte = FoxWord8.word
  type ip_number = FoxWord32.word

  datatype check_result = Valid | Invalid | Ignore

  fun make_data size =
       B.Access.from_list (B.Tabulate.tabulate
		          ((fn n => FoxWord8.from_int (n mod 256)),
		           size))

  fun debug_print packet =
       let val pdata = B.Dyn_Array.read packet
	   val header = print_header ^ "making outgoing \n"
	   val dlen = ByteArray.length pdata
	   val format = [B.Format.String header,
			 B.Format.String "\ndata = ",
			 B.Format.Bytes (min (40, dlen)),
			 B.Format.String "...\n"]
       in local_print (fold op^ (B.Format.bytearray (format, pdata, 0)) "")
       end

  fun make_packet (connection, data)  =
       let val size = ByteArray.length data
	   val (packet, send) = Ip.allocate_send (connection, size)
       in B.Dyn_Array.update (packet, 0, data);
          if do_prints then debug_print packet else ();
	  send
       end

  datatype check_data = All | Some | None

  fun check_data (check, data, Ip.Ip_Packet {data = found, ...}) =
       case check of
          None => Valid
	| _ =>
	   let val (d, size) =
	             case check of
	                None => (ByteArray.array (0, 0), 0)
		      | Some => (B.Dyn_Array.sub (found, 0, 2), 2)
		      | All => (B.Dyn_Array.read found,
				B.Dyn_Array.size found)
	   in if B.Access.compare_ranges
	       ((data, B.Access.Range {first = 0, last = size}),
		(d, B.Access.Range {first = 0, last = size})) then Valid
	      else Invalid
	   end

  fun check_other _ = Valid

  fun byte (Ip.Ip_Packet {data, ...}, index) =
       B.Dyn_Array.sub1 (data, index)

  fun start_test () = ()

  val stop_test = start_test

  exception Bad_Ip_Address of ubyte4 * string

  fun translate_address ip = P.Address {ip = ip, proto = protocol_number}

  fun makestring_packet (Ip.Ip_Packet {data, ...}) =
       let val p = B.Dyn_Array.read data
       in B.V.String.concat 
	 (B.Format.bytearray ([B.Format.String "Packet: ",
			       B.Format.Bytes (min (100, ByteArray.length p)),
			       B.Format.String "\n"],p,0))
       end

  fun on_connection _ = ()

  val min_packet = 1

  fun size (Ip.Ip_Packet {data, ...}) =
       FoxWord32.from_int (B.Dyn_Array.size data)
 end
