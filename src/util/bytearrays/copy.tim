(*

	FoxNet: The Fox Project's Communication Protocol Implementation Effort
	Edoardo Biagioni <Edoardo.Biagioni@cs.cmu.edu>
	Nick Haines  (Nick.Haines@cs.cmu.edu)
	Brian Milnes (Brian.Milnes@cs.cmu.edu)
	Fox Project
	School of Computer Science
	Carnegie Mellon University
	Pittsburgh, Pa 15139-3891

		i.	Abstract

	Test code to test the Copy utility.

		ii.	Table of Contents

	i.	Abstract
	ii.	Table of Contents
	iii.	RCS Log
	1.	functor Time_Copy
	2.      structure Time_Copy

		iii.	RCS Log
	
$Log: copy.tim,v $
Revision 1.6  1995/07/05  23:33:33  esb
adapted to new vendor signature.

Revision 1.5  1995/03/10  03:51:29  esb
adapted to new vendor.sig.

Revision 1.4  1994/06/16  16:50:23  danwang
Updated for functorized Fox_Basis

Revision 1.3  1994/02/25  22:09:17  esb
added more tests.

Revision 1.2  93/11/04  16:23:22  esb
added the function run_times.

Revision 1.1  1993/10/29  04:46:02  esb
Initial revision


		1.	functor Test_Copy
*)

functor Time_Copy (structure Copy: COPY    
		   structure V: VENDOR
		   structure Debug: DEBUG) =
 struct
  local
   structure Trace = Trace (structure V = V
			    val debug_level = NONE
			    val module_name = "copy.tim"
	                    val makestring = fn _ => NONE)
   val local_print = Trace.local_print

   fun run_test (name, src, dest, bytes, count) =
        let val source = ByteArray.array (src + bytes, 7)
            val destination = ByteArray.array (dest + bytes, 0)
	    val arg = (source, src, bytes, destination, dest)
	    val start = V.Time.gettimeofday ()
	    fun loop 0 = ()
	      | loop n = (Copy.copy arg; loop (n - 1))
	    val _ = loop count
	    val stop = V.Time.gettimeofday ()
	    val delta_ms = V.Time.deltams (stop, start)
	    val bytes_per_ms = (bytes * count) div delta_ms
        in local_print (name ^ ", " ^
			V.Integer.makestring bytes ^ " bytes x " ^
			V.Integer.makestring count ^ " iterations, " ^
			V.Integer.makestring delta_ms ^ " ms, " ^
			V.Integer.makestring bytes_per_ms ^ " bytes/ms\n")
	end

  in

   fun run_times n = 
        (run_test ("unaligned copy", 0, 1, 1501, n);
         run_test ("aligned-2 copy", 0, 2, 1500, n);
         run_test ("aligned-4 copy", 0, 8, 1500, n);
         run_test ("unaligned copy", 1, 0, 20, n * 10);
         run_test ("aligned-2 copy", 2, 0, 20, n * 10);
         run_test ("aligned-4 copy", 8, 0, 20, n * 10))

   fun run () = run_times 1000

  end (* local *)

 end (* struct *)

(*
		2. structure Test_Copy
*)

structure Time_Copy = Time_Copy (structure Copy = Fox_Basis.Copy
				 structure Debug = Fox_Basis.Debug
				 structure V = Fox_Basis.V)










